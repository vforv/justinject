"use strict";var cov_15xygthlya=function(){var path="/home/vladimir/Documents/ts-di/src/Container.ts",hash="ce757827f7ceda5bdb10546b8d5c91b7965fec43",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/vladimir/Documents/ts-di/src/Container.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:28}},"2":{start:{line:5,column:0},end:{line:139,column:4}},"3":{start:{line:7,column:8},end:{line:7,column:33}},"4":{start:{line:8,column:8},end:{line:8,column:37}},"5":{start:{line:9,column:8},end:{line:9,column:31}},"6":{start:{line:10,column:8},end:{line:10,column:30}},"7":{start:{line:13,column:8},end:{line:13,column:42}},"8":{start:{line:22,column:23},end:{line:22,column:77}},"9":{start:{line:23,column:27},end:{line:23,column:82}},"10":{start:{line:23,column:49},end:{line:23,column:81}},"11":{start:{line:24,column:8},end:{line:28,column:9}},"12":{start:{line:25,column:30},end:{line:25,column:50}},"13":{start:{line:26,column:12},end:{line:26,column:35}},"14":{start:{line:27,column:12},end:{line:27,column:68}},"15":{start:{line:29,column:8},end:{line:29,column:61}},"16":{start:{line:37,column:8},end:{line:37,column:29}},"17":{start:{line:38,column:8},end:{line:50,column:11}},"18":{start:{line:39,column:38},end:{line:39,column:66}},"19":{start:{line:40,column:38},end:{line:40,column:77}},"20":{start:{line:41,column:12},end:{line:43,column:13}},"21":{start:{line:42,column:16},end:{line:42,column:63}},"22":{start:{line:44,column:12},end:{line:48,column:13}},"23":{start:{line:45,column:16},end:{line:47,column:17}},"24":{start:{line:46,column:20},end:{line:46,column:96}},"25":{start:{line:49,column:12},end:{line:49,column:53}},"26":{start:{line:58,column:8},end:{line:58,column:52}},"27":{start:{line:66,column:8},end:{line:66,column:52}},"28":{start:{line:76,column:8},end:{line:91,column:9}},"29":{start:{line:78,column:16},end:{line:82,column:17}},"30":{start:{line:79,column:32},end:{line:79,column:57}},"31":{start:{line:80,column:20},end:{line:80,column:55}},"32":{start:{line:81,column:20},end:{line:81,column:31}},"33":{start:{line:83,column:16},end:{line:83,column:53}},"34":{start:{line:86,column:16},end:{line:86,column:49}},"35":{start:{line:89,column:16},end:{line:89,column:49}},"36":{start:{line:100,column:8},end:{line:100,column:73}},"37":{start:{line:101,column:8},end:{line:101,column:68}},"38":{start:{line:102,column:8},end:{line:112,column:9}},"39":{start:{line:104,column:16},end:{line:104,column:64}},"40":{start:{line:107,column:16},end:{line:107,column:78}},"41":{start:{line:110,column:16},end:{line:110,column:78}},"42":{start:{line:121,column:8},end:{line:121,column:46}},"43":{start:{line:122,column:8},end:{line:137,column:9}},"44":{start:{line:124,column:16},end:{line:124,column:63}},"45":{start:{line:125,column:16},end:{line:125,column:52}},"46":{start:{line:126,column:16},end:{line:126,column:30}},"47":{start:{line:129,column:16},end:{line:131,column:17}},"48":{start:{line:130,column:20},end:{line:130,column:65}},"49":{start:{line:132,column:16},end:{line:132,column:30}},"50":{start:{line:135,column:16},end:{line:135,column:104}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:18},end:{line:11,column:5}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:22},end:{line:14,column:5}},line:12},"2":{name:"(anonymous_2)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:20},end:{line:30,column:5}},line:20},"3":{name:"(anonymous_3)",decl:{start:{line:23,column:38},end:{line:23,column:39}},loc:{start:{line:23,column:49},end:{line:23,column:81}},line:23},"4":{name:"(anonymous_4)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:16},end:{line:51,column:5}},line:36},"5":{name:"(anonymous_5)",decl:{start:{line:38,column:18},end:{line:38,column:19}},loc:{start:{line:38,column:30},end:{line:50,column:9}},line:38},"6":{name:"(anonymous_6)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:20},end:{line:59,column:5}},line:57},"7":{name:"(anonymous_7)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:26},end:{line:67,column:5}},line:65},"8":{name:"(anonymous_8)",decl:{start:{line:75,column:4},end:{line:75,column:5}},loc:{start:{line:75,column:45},end:{line:92,column:5}},line:75},"9":{name:"(anonymous_9)",decl:{start:{line:99,column:4},end:{line:99,column:5}},loc:{start:{line:99,column:48},end:{line:113,column:5}},line:99},"10":{name:"(anonymous_10)",decl:{start:{line:120,column:4},end:{line:120,column:5}},loc:{start:{line:120,column:33},end:{line:138,column:5}},line:120}},branchMap:{"0":{loc:{start:{line:22,column:23},end:{line:22,column:77}},type:"binary-expr",locations:[{start:{line:22,column:23},end:{line:22,column:71}},{start:{line:22,column:75},end:{line:22,column:77}}],line:22},"1":{loc:{start:{line:24,column:8},end:{line:28,column:9}},type:"if",locations:[{start:{line:24,column:8},end:{line:28,column:9}},{start:{line:24,column:8},end:{line:28,column:9}}],line:24},"2":{loc:{start:{line:24,column:12},end:{line:24,column:55}},type:"binary-expr",locations:[{start:{line:24,column:12},end:{line:24,column:25}},{start:{line:24,column:29},end:{line:24,column:55}}],line:24},"3":{loc:{start:{line:41,column:12},end:{line:43,column:13}},type:"if",locations:[{start:{line:41,column:12},end:{line:43,column:13}},{start:{line:41,column:12},end:{line:43,column:13}}],line:41},"4":{loc:{start:{line:44,column:12},end:{line:48,column:13}},type:"if",locations:[{start:{line:44,column:12},end:{line:48,column:13}},{start:{line:44,column:12},end:{line:48,column:13}}],line:44},"5":{loc:{start:{line:44,column:16},end:{line:44,column:67}},type:"binary-expr",locations:[{start:{line:44,column:16},end:{line:44,column:32}},{start:{line:44,column:36},end:{line:44,column:67}}],line:44},"6":{loc:{start:{line:45,column:16},end:{line:47,column:17}},type:"if",locations:[{start:{line:45,column:16},end:{line:47,column:17}},{start:{line:45,column:16},end:{line:47,column:17}}],line:45},"7":{loc:{start:{line:76,column:8},end:{line:91,column:9}},type:"switch",locations:[{start:{line:77,column:12},end:{line:84,column:13}},{start:{line:85,column:12},end:{line:87,column:13}},{start:{line:88,column:12},end:{line:90,column:13}}],line:76},"8":{loc:{start:{line:78,column:16},end:{line:82,column:17}},type:"if",locations:[{start:{line:78,column:16},end:{line:82,column:17}},{start:{line:78,column:16},end:{line:82,column:17}}],line:78},"9":{loc:{start:{line:102,column:8},end:{line:112,column:9}},type:"switch",locations:[{start:{line:103,column:12},end:{line:105,column:13}},{start:{line:106,column:12},end:{line:108,column:13}},{start:{line:109,column:12},end:{line:111,column:13}}],line:102},"10":{loc:{start:{line:122,column:8},end:{line:137,column:9}},type:"switch",locations:[{start:{line:123,column:12},end:{line:127,column:13}},{start:{line:128,column:12},end:{line:133,column:13}},{start:{line:134,column:12},end:{line:136,column:13}}],line:122},"11":{loc:{start:{line:129,column:16},end:{line:131,column:17}},type:"if",locations:[{start:{line:129,column:16},end:{line:131,column:17}},{start:{line:129,column:16},end:{line:131,column:17}}],line:129}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0,0],"10":[0,0,0],"11":[0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_15xygthlya.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_15xygthlya.s[1]++;require("reflect-metadata");/*eslint new-parens: "error"*/cov_15xygthlya.s[2]++;exports.Container=new class{constructor(){cov_15xygthlya.f[0]++;cov_15xygthlya.s[3]++;this.service=new Map();cov_15xygthlya.s[4]++;this.serviceType=new Map();cov_15xygthlya.s[5]++;this.mocks=new Map();cov_15xygthlya.s[6]++;this.hasMocks=false;}set(target,type){cov_15xygthlya.f[1]++;cov_15xygthlya.s[7]++;this.setserviceType(target,type);}/**
     * Resolove service with all deps
     *
     * @param target service to resolve
     */resolve(target){cov_15xygthlya.f[2]++;// tokens are required dependencies, while injections are resolved tokens from the Container
const tokens=(cov_15xygthlya.s[8]++,(cov_15xygthlya.b[0][0]++,Reflect.getMetadata('design:paramtypes',target))||(cov_15xygthlya.b[0][1]++,[]));const injections=(cov_15xygthlya.s[9]++,tokens.map(token=>{cov_15xygthlya.f[3]++;cov_15xygthlya.s[10]++;return exports.Container.resolve(token);}));cov_15xygthlya.s[11]++;if((cov_15xygthlya.b[2][0]++,this.hasMocks)&&(cov_15xygthlya.b[2][1]++,this.isMockedClass(target))){cov_15xygthlya.b[1][0]++;const MockClass=(cov_15xygthlya.s[12]++,this.getMock(target));cov_15xygthlya.s[13]++;console.log(MockClass);cov_15xygthlya.s[14]++;return this.resolveByserviceType(MockClass,injections);}else{cov_15xygthlya.b[1][1]++;}cov_15xygthlya.s[15]++;return this.resolveByserviceType(target,injections);}/**
     * Mock or replace service
     *
     * @param mocks all mocking services
     */mock(mocks){cov_15xygthlya.f[4]++;cov_15xygthlya.s[16]++;this.hasMocks=true;cov_15xygthlya.s[17]++;mocks.map(target=>{cov_15xygthlya.f[5]++;const serviceToMockName=(cov_15xygthlya.s[18]++,target.dep.name.slice(0,-4));const serviceToMockType=(cov_15xygthlya.s[19]++,this.serviceType.get(serviceToMockName));cov_15xygthlya.s[20]++;if(target.dep.name.slice(-4)!=='Mock'){cov_15xygthlya.b[3][0]++;cov_15xygthlya.s[21]++;throw Error('Class name must end with "Mock"');}else{cov_15xygthlya.b[3][1]++;}cov_15xygthlya.s[22]++;if((cov_15xygthlya.b[5][0]++,!target.override)&&(cov_15xygthlya.b[5][1]++,serviceToMockType==='default')){cov_15xygthlya.b[4][0]++;cov_15xygthlya.s[23]++;if(!(target.dep.prototype instanceof this.service.get(serviceToMockName))){cov_15xygthlya.b[6][0]++;cov_15xygthlya.s[24]++;throw Error('"Mock" class must extends main instance, or use override tag');}else{cov_15xygthlya.b[6][1]++;}}else{cov_15xygthlya.b[4][1]++;}cov_15xygthlya.s[25]++;this.setMocks(target,serviceToMockType);});}/**
     * Get mocking service
     *
     * @param target service which we want to mock
     */getMock(target){cov_15xygthlya.f[6]++;cov_15xygthlya.s[26]++;return this.mocks.get(`${target.name}Mock`);}/**
     * Check if target service, the service we want to mock
     *
     * @param target service which we want to mock
     */isMockedClass(target){cov_15xygthlya.f[7]++;cov_15xygthlya.s[27]++;return this.mocks.has(`${target.name}Mock`);}/**
     * This will reslove service, if service is sinleton
     * we need just to return instance
     *
     * @param target service
     * @param injections dependencies
     */resolveByserviceType(target,injections){cov_15xygthlya.f[8]++;cov_15xygthlya.s[28]++;switch(this.serviceType.get(target.name)){case'singleton':cov_15xygthlya.b[7][0]++;{cov_15xygthlya.s[29]++;if(this.service.get(target.name)===null){cov_15xygthlya.b[8][0]++;const inj=(cov_15xygthlya.s[30]++,new target(...injections));cov_15xygthlya.s[31]++;this.service.set(target.name,inj);cov_15xygthlya.s[32]++;return inj;}else{cov_15xygthlya.b[8][1]++;}cov_15xygthlya.s[33]++;return this.service.get(target.name);}case'default':cov_15xygthlya.b[7][1]++;{cov_15xygthlya.s[34]++;return new target(...injections);}default:cov_15xygthlya.b[7][2]++;{cov_15xygthlya.s[35]++;return new target(...injections);}}}/**
     * This will add mocking services to service property
     *
     * @param mockingService
     * @param serviceToMockType
     */setMocks(mockingService,serviceToMockType){cov_15xygthlya.f[9]++;cov_15xygthlya.s[36]++;this.serviceType.set(mockingService.dep.name,serviceToMockType);cov_15xygthlya.s[37]++;this.mocks.set(mockingService.dep.name,mockingService.dep);cov_15xygthlya.s[38]++;switch(serviceToMockType){case'singleton':cov_15xygthlya.b[9][0]++;{cov_15xygthlya.s[39]++;this.service.set(mockingService.dep.name,null);}case'default':cov_15xygthlya.b[9][1]++;{cov_15xygthlya.s[40]++;this.service.set(mockingService.dep.name,mockingService.dep);}default:cov_15xygthlya.b[9][2]++;{cov_15xygthlya.s[41]++;this.service.set(mockingService.dep.name,mockingService.dep);}}}/**
     * Add new service
     *
     * @param target new service to add
     * @param type Type of service
     */setserviceType(target,type){cov_15xygthlya.f[10]++;cov_15xygthlya.s[42]++;this.service.set(target.name,target);cov_15xygthlya.s[43]++;switch(type){case'singleton':cov_15xygthlya.b[10][0]++;{cov_15xygthlya.s[44]++;this.serviceType.set(target.name,'singleton');cov_15xygthlya.s[45]++;this.service.set(target.name,null);cov_15xygthlya.s[46]++;return target;}case undefined:cov_15xygthlya.b[10][1]++;{cov_15xygthlya.s[47]++;if(!this.serviceType.has(target.name)){cov_15xygthlya.b[11][0]++;cov_15xygthlya.s[48]++;this.serviceType.set(target.name,'default');}else{cov_15xygthlya.b[11][1]++;}cov_15xygthlya.s[49]++;return target;}default:cov_15xygthlya.b[10][2]++;{cov_15xygthlya.s[50]++;throw Error(`Please check ${target.name} service. Service type ${type} doesn't exists`);}}}}();//# sourceMappingURL=data:application/json;charset=utf-8;base64,